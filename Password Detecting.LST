C51 COMPILER V9.00   PASSWORD_DETECTING                                                    01/07/2014 12:06:49 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE PASSWORD_DETECTING
OBJECT MODULE PLACED IN Password Detecting.OBJ
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE Password Detecting.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg52.h> 
   2          /*以下两处需要了解数码管的显示原理*/
   3          sbit duan_select=P2^2; //定义锁存使能端口 段锁存（即控制显示什么数字）
   4          sbit wei_select=P2^3; //  位锁存（即控制哪一位显示）
   5          sbit led_wrong=P2^0;
   6          sbit led_right=P2^1;
   7          sbit sound=P2^4;
   8          
   9          #define datasend P0 //定义数据端口数据由P0口输出， 程序中遇到datasend 则用P0替换
  10          #define Matrix_key P1   //矩阵键盘的状态直接输出到P1口
  11          
  12           // 定义一个数组，显示段码值0~9，以方便随时调用，‘code'意思即将数组存在ROM中
  13          unsigned char code display_value[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  14           //display_place 即位码数组，0xfe就是使第一位数码管亮，0xfd就是使第二位数码管亮，如此类推 
  15          unsigned char code display_place[]={0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f};
  16          
  17          unsigned char digital_display[8],temp[8],new_password[6]; //数组的定义
  18          unsigned char password[6]={1,1,1,1,1,1};//密码初值
  19          unsigned char key_value,i,j,k,count,m,n,l,freq;                  
  20          bit sign=0,detect=0,siv=0;      //bit为布尔类型数据，其值为0或1（即表示真或假）
  21          
  22          //以下是子函数的声明 
  23          void change_password();
  24          void input_password();
  25          void Delay(unsigned char t); //延时函数，不是精确的延时
  26          void Display(unsigned char num);//数码管显示函数
  27          void Init_Timer(void);   //定时器0的声明
  28          void baojing();
  29          /*------------------------------------------------
  30          当然我们需要使用矩阵键盘，那就牵涉到矩阵键盘的读取
  31          以下函数是检测究竟是哪个键被按下
  32          按键扫描函数，返回扫描键值
  33          ------------------------------------------------*/
  34          unsigned char keyscan(void)  //键盘扫描函数，使用行列反转扫描法
  35          {
  36   1      unsigned char row,column;//行列值中间变量
  37   1      Matrix_key=0x0f;            //行线输出全为0
  38   1      row= Matrix_key&0x0f;     //读入列线值
  39   1       if(row!=0x0f)    //先检测有无按键按下
  40   1       {
  41   2        Delay(10);        //去抖
  42   2        if(( Matrix_key&0x0f)!=0x0f)
  43   2        {
  44   3          row= Matrix_key&0x0f;  //读入列线值
  45   3          Matrix_key=row|0xf0;  //输出当前列线值
  46   3          column= Matrix_key&0xf0;  //读入行线值
  47   3      
  48   3          while(( Matrix_key&0xf0)!=0xf0);//等待松开并输出
  49   3      
  50   3          return(row+column);//键盘最后组合码值
  51   3         }
  52   2        }return(0xff);     //返回该值
  53   1      }
  54          /*------------------------------------------------
  55          按键值处理函数，返回扫键值
C51 COMPILER V9.00   PASSWORD_DETECTING                                                    01/07/2014 12:06:49 PAGE 2   

  56          ------------------------------------------------*/
  57          unsigned char decode(void)
  58          {
  59   1       switch(keyscan())
  60   1       {
  61   2        case 0x7e:return 0;break;//0 按下相应的键显示相对应的码值
  62   2        case 0x7d:return 1;break;//1
  63   2        case 0x7b:return 2;break;//2
  64   2        case 0x77:return 3;break;//3
  65   2        case 0xbe:return 4;break;//4
  66   2        case 0xbd:return 5;break;//5
  67   2        case 0xbb:return 6;break;//6
  68   2        case 0xb7:return 7;break;//7
  69   2        case 0xde:return 8;break;//8
  70   2        case 0xdd:return 9;break;//9
  71   2        case 0xdb:return 't';break;//返回‘t'即表明按下了退位键
  72   2        case 0xd7:return 'o';break;//返回‘o'即表明按下了确认键
  73   2        case 0xee:return 'c';break;//返回‘c'即表明按下了修改密码键
  74   2        default:return 0xff;break;
  75   2       }
  76   1      }
  77          void clear_screen()     //清屏子程序
  78          { for(j=0;j<8;j++)
  79   1        digital_display[j]=0;}    
  80          /*------------------------------------------------
  81                              主函数
  82          ------------------------------------------------*/
  83          void main ()
  84          {
  85   1      Init_Timer();
  86   1      n=0;   //记录输入错误密码的次数
  87   1      m=6;   //位数赋初始值
  88   1      while (1)         //主循环
  89   1      { Display(8);
  90   2      baojing();
  91   2      key_value=decode();      //读取按键输入值
  92   2      if (key_value!=0xff     )
  93   2        {       
  94   3        TR0=0;  TR1=0;      //定时器开关关闭  
  95   3         led_wrong=1;
  96   3         led_right=1;
  97   3       if ((key_value=='c')&&(n<3))   //若key_value=c则说明发生修改密码请求，需要输入正确的密码才能修改密码;  
  98   3       { clear_screen();
  99   4         digital_display[0]=0x30;
 100   4         digital_display[1]=0x37;
 101   4         digital_display[2]=0x73;
 102   4         digital_display[3]=0x3E;
 103   4         digital_display[4]=0x78;
 104   4         detect=1;  }
 105   3      
 106   3      else if((siv)&&(detect))
 107   3       {     
 108   4       change_password();
 109   4       }
 110   3      //没按修改密码键则执行以下程序  
 111   3      else
 112   3        {  
 113   4      if (n<3)
 114   4      {
 115   5       input_password();
 116   5       if(key_value=='o')
 117   5         {
C51 COMPILER V9.00   PASSWORD_DETECTING                                                    01/07/2014 12:06:49 PAGE 3   

 118   6            if(sign)
 119   6                //如果比较全部相同，标志位置1
 120   6                 { sign=0;   //及时将标志位置零，防止判断错误
 121   7                    n=0;
 122   7                        led_right=0;
 123   7                        if(detect)
 124   7                        {siv=1; }
 125   7                   digital_display[2]=0x5E; 
 126   7               digital_display[3]=0x77; 
 127   7                       digital_display[4]=0x54;
 128   7                       digital_display[5]=0x54;
 129   7                                      }
 130   6                else 
 131   6                  { n++;
 132   7                   led_wrong=0;
 133   7                       l=0;   
 134   7                       TR0=1;
 135   7                       TR1=1;        //定时器开关打开                  
 136   7                       digital_display[0]=0x6D;
 137   7               digital_display[1]=0x7C;
 138   7                              }
 139   6                 }
 140   5                }
 141   4              }
 142   3         }
 143   2        }
 144   1       }
 145           /*设置延时函数的原因是用来防抖*/
 146          
 147          void Delay(unsigned char t)
 148          {
 149   1       unsigned int x ;  
 150   1       while(t--)
 151   1       {
 152   2         for (x=0;x<500;x++)  ;
 153   2       }
 154   1      }
 155          /*------------------------------------------------
 156           显示函数，用于动态扫描数码管
 157          ------------------------------------------------*/
 158          void Display(unsigned char para)
 159          {        static unsigned char s=0;
 160   1             datasend=0;   //清空数据，防止有交替重影
 161   1                 duan_select=1;     //段选
 162   1             duan_select=0;
 163   1      
 164   1                 datasend=display_place[s]; 
 165   1                 wei_select=1;                //位选 
 166   1             wei_select=0;
 167   1      
 168   1                 datasend=digital_display[s]; //取显示数据，段码
 169   1                 duan_select=1;     //段选
 170   1             duan_select=0;  
 171   1                 s++;
 172   1             if(s==para)
 173   1                 {   s=0;     }
 174   1      }
 175          void input_password()
 176            {
 177   1         if(i==0)
 178   1          {
 179   2         clear_screen();
C51 COMPILER V9.00   PASSWORD_DETECTING                                                    01/07/2014 12:06:49 PAGE 4   

 180   2              }
 181   1              //回删功能
 182   1              if ((key_value=='t')&&(i>=1))
 183   1              {       
 184   2               i--;
 185   2               for (j=7;j>=1;j--)
 186   2               {
 187   3                digital_display[j]=digital_display[j-1];
 188   3                }
 189   2              }       
 190   1       if((i<6)&&(key_value!='o')&&(key_value!='t'))
 191   1           { temp[i]=key_value;
 192   2               for(j=0;j<=i;j++)  //通过一定顺序把把密码数组中的值赋值到显示缓冲区，从右往左输入             
 193   2            digital_display[7-i+j]=display_value[temp[j]]; 
 194   2               i++;              //输入数值累加
 195   2         }
 196   1                         
 197   1              if(key_value=='o')              //key_value=‘o'说明按下了确认键，则执行判断密码的正确性                
 198   1       {
 199   2                count=i;                //i为输入密码的个数
 200   2                i=0;
 201   2                if (count==m)
 202   2        {
 203   3                 count=0;
 204   3                 sign=1;       //先把比较位置1
 205   3                 for(j=0;j<m;j++)//循环比较m个数值，如果有一个不相等 则最终标志位sign值为0                                  
 206   3                 sign=sign&&(temp[j]==password[j]);//比较输入值和已有的密码    
 207   3                                }
 208   2                clear_screen();
 209   2        }
 210   1      }
 211          void change_password()
 212          {
 213   1      if((key_value!='o')&&(key_value!='c'))  //确保按键值为数字键或者退位键
 214   1       {       
 215   2         if(k==0)
 216   2             {
 217   3            clear_screen();  }
 218   2        //按退位键执行密码回删
 219   2              if ((key_value=='t')&&(k>=1))
 220   2                  {   
 221   3                  k--;
 222   3                      for (j=7;j>=1;j--)
 223   3               {
 224   4                  digital_display[j]=digital_display[j-1]; 
 225   4                          }
 226   3              }        
 227   2                      //否则存入一位密码值
 228   2              else if(key_value!='t')
 229   2                      {
 230   3                      if (k<6) //最多只能输入六个密码
 231   3                      { 
 232   4                      new_password[k]=key_value;      //将按键值赋到password
 233   4                      for(j=0;j<=k;j++)         //通过一定顺序把临时数组中
 234   4                                //的值赋值到显示缓冲区，从右往左输入
 235   4              digital_display[7-k+j]=display_value[password[j]]; 
 236   4                        k++; //密码位数加1
 237   4                 }    
 238   3              }
 239   2       }
 240   1         if (key_value=='o')     //按下确认键密码修改成功
 241   1                      {siv=0;   //表示修改密码完毕
C51 COMPILER V9.00   PASSWORD_DETECTING                                                    01/07/2014 12:06:49 PAGE 5   

 242   2                       detect=0;       
 243   2                       digital_display[0]=0x76;        //显示H
 244   2                      if (k!=0)
 245   2                      {  m=k;   //m存储修改密码的位数
 246   3                         k=0;   //索引清零      
 247   3                 for (j=0;j<6;j++)
 248   3                 password[j]=new_password[j];    }
 249   2                      }
 250   1                      }
 251          /*------------------------------------------------
 252                              定时器初始化子程序
 253          ------------------------------------------------*/
 254          void Init_Timer(void)
 255          {
 256   1      TMOD |= 0x11;     //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响                 
 257   1      EA=1;            //总中断打开
 258   1      ET0=1;           //定时器中断打开
 259   1      ET1=1;
 260   1      }
 261          void baojing(void)
 262           { Delay(1);
 263   1        freq++;
 264   1        }
 265          /*------------------------------------------------
 266                           定时器0中断子程序
 267          ------------------------------------------------*/
 268          void Timer0_isr(void) interrupt 1 
 269          { 
 270   1       static unsigned char inner_count;
 271   1       TH0=(65536-2000)/256;  
 272   1       TL0=(65536-2000)%256;
 273   1       inner_count++;
 274   1       if (inner_count==150)
 275   1       {  inner_count=0;
 276   2        l++;
 277   2          if (l<7)
 278   2              { for (j=7;j>=1;j--)
 279   3              digital_display[j]=digital_display[j-1];
 280   3              digital_display[l-1]=0;
 281   3                 }
 282   2      else if (l>=7)
 283   2      {   for (j=0;j<7;j++)
 284   3              digital_display[j]=digital_display[j+1];
 285   3              digital_display[14-l]=0;
 286   3              if (l==12)
 287   3                 l=0;  }
 288   2         }
 289   1      } 
 290          void Timer1_isr(void) interrupt 3
 291          {   TH1=0xfe;
 292   1          TL1=freq; 
 293   1              sound=!sound; }
 294           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    859    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     39       1
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.00   PASSWORD_DETECTING                                                    01/07/2014 12:06:49 PAGE 6   

   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
